{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMBS0+IytDvefc7Lp9/DOP+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RauTvsCiy4Hv","executionInfo":{"status":"ok","timestamp":1701948146857,"user_tz":-540,"elapsed":15952,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"7eac4638-c14e-46d8-a3fc-93e9a2c30898"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["!pip install finance-datareader"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XZcYOKNMzb1M","executionInfo":{"status":"ok","timestamp":1701948164044,"user_tz":-540,"elapsed":16015,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"eb79ffde-0fd1-453d-b19c-6254abffb1e4"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting finance-datareader\n","  Downloading finance_datareader-0.9.66-py3-none-any.whl (23 kB)\n","Requirement already satisfied: pandas>=0.19.2 in /usr/local/lib/python3.10/dist-packages (from finance-datareader) (1.5.3)\n","Requirement already satisfied: requests>=2.3.0 in /usr/local/lib/python3.10/dist-packages (from finance-datareader) (2.31.0)\n","Collecting requests-file (from finance-datareader)\n","  Downloading requests_file-1.5.1-py2.py3-none-any.whl (3.7 kB)\n","Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from finance-datareader) (4.9.3)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from finance-datareader) (4.66.1)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.19.2->finance-datareader) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.19.2->finance-datareader) (2023.3.post1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.19.2->finance-datareader) (1.23.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.3.0->finance-datareader) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.3.0->finance-datareader) (3.6)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.3.0->finance-datareader) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.3.0->finance-datareader) (2023.11.17)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from requests-file->finance-datareader) (1.16.0)\n","Installing collected packages: requests-file, finance-datareader\n","Successfully installed finance-datareader-0.9.66 requests-file-1.5.1\n"]}]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","import re\n","import FinanceDataReader as fdr\n","from datetime import datetime, timedelta\n","import calendar\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import LSTM, Dense, Dropout\n","from tensorflow.keras.regularizers import l2\n","from tensorflow.keras.losses import Huber\n","from tensorflow.keras.optimizers import Adam, RMSprop\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.metrics import mean_squared_error\n","from tensorflow.keras.callbacks import LearningRateScheduler, EarlyStopping, ModelCheckpoint\n","from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten\n","from keras.layers import *\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"ke_cat_Hzdu1","executionInfo":{"status":"ok","timestamp":1701948171106,"user_tz":-540,"elapsed":5287,"user":{"displayName":"김젼","userId":"08959404982920360269"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv('/content/drive/MyDrive/학교/2023-2/창종설/sm_merged_f.csv')"],"metadata":{"id":"jwv4i-O3zhdb","executionInfo":{"status":"ok","timestamp":1701948171707,"user_tz":-540,"elapsed":603,"user":{"displayName":"김젼","userId":"08959404982920360269"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"xon-jYo40O2y","executionInfo":{"status":"ok","timestamp":1701948171708,"user_tz":-540,"elapsed":12,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"7b3fbba8-f66e-4d90-9d1f-221d33f6e762"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         Date   Open   High    Low  Close   Volume    Change  \\\n","0  2023-02-01  87700  88000  86100  86700   410616 -0.014773   \n","1  2023-02-02  86900  89900  86100  89100   683339  0.027682   \n","2  2023-02-03  89900  95900  88100  91000  2363145  0.021324   \n","3  2023-02-06  90500  93900  89600  92200   646786  0.013187   \n","4  2023-02-07  93000  99700  85700  90100  3863446 -0.022777   \n","\n","   news_prob_scaled  jongto_prob_scaled  \n","0          0.349326            0.623016  \n","1          0.382584            0.647312  \n","2          0.491089            0.625513  \n","3          0.383724            0.641886  \n","4          0.404888            0.623312  "],"text/html":["\n","  <div id=\"df-5b1295ea-4500-44a0-8bae-d863e1aafe7e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Change</th>\n","      <th>news_prob_scaled</th>\n","      <th>jongto_prob_scaled</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2023-02-01</td>\n","      <td>87700</td>\n","      <td>88000</td>\n","      <td>86100</td>\n","      <td>86700</td>\n","      <td>410616</td>\n","      <td>-0.014773</td>\n","      <td>0.349326</td>\n","      <td>0.623016</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2023-02-02</td>\n","      <td>86900</td>\n","      <td>89900</td>\n","      <td>86100</td>\n","      <td>89100</td>\n","      <td>683339</td>\n","      <td>0.027682</td>\n","      <td>0.382584</td>\n","      <td>0.647312</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2023-02-03</td>\n","      <td>89900</td>\n","      <td>95900</td>\n","      <td>88100</td>\n","      <td>91000</td>\n","      <td>2363145</td>\n","      <td>0.021324</td>\n","      <td>0.491089</td>\n","      <td>0.625513</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2023-02-06</td>\n","      <td>90500</td>\n","      <td>93900</td>\n","      <td>89600</td>\n","      <td>92200</td>\n","      <td>646786</td>\n","      <td>0.013187</td>\n","      <td>0.383724</td>\n","      <td>0.641886</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2023-02-07</td>\n","      <td>93000</td>\n","      <td>99700</td>\n","      <td>85700</td>\n","      <td>90100</td>\n","      <td>3863446</td>\n","      <td>-0.022777</td>\n","      <td>0.404888</td>\n","      <td>0.623312</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b1295ea-4500-44a0-8bae-d863e1aafe7e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5b1295ea-4500-44a0-8bae-d863e1aafe7e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5b1295ea-4500-44a0-8bae-d863e1aafe7e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-000a96c7-8672-4732-bbf7-01d994273dce\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-000a96c7-8672-4732-bbf7-01d994273dce')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-000a96c7-8672-4732-bbf7-01d994273dce button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["### 전처리 및 Window Dataset"],"metadata":{"id":"fTSHvxChF58x"}},{"cell_type":"code","source":["df.drop(['Date'], axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"mFyX1fOp1T_F","executionInfo":{"status":"ok","timestamp":1701948171708,"user_tz":-540,"elapsed":9,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"c8a0fe92-3fed-44fa-e0f9-eb98aa1fb3be"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Open    High     Low   Close   Volume    Change  news_prob_scaled  \\\n","0     87700   88000   86100   86700   410616 -0.014773          0.349326   \n","1     86900   89900   86100   89100   683339  0.027682          0.382584   \n","2     89900   95900   88100   91000  2363145  0.021324          0.491089   \n","3     90500   93900   89600   92200   646786  0.013187          0.383724   \n","4     93000   99700   85700   90100  3863446 -0.022777          0.404888   \n","..      ...     ...     ...     ...      ...       ...               ...   \n","119  116700  129900  116600  124900   723958  0.071184          0.259010   \n","120  125500  125600  116900  116900   452799 -0.064051          0.395371   \n","121  117000  124300  117000  123400   370524  0.055603          0.349430   \n","122  123600  128500  122100  128000   258017  0.037277          0.425056   \n","123  128000  133500  124600  130600   287530  0.020312          0.327262   \n","\n","     jongto_prob_scaled  \n","0              0.623016  \n","1              0.647312  \n","2              0.625513  \n","3              0.641886  \n","4              0.623312  \n","..                  ...  \n","119            0.641866  \n","120            0.563662  \n","121            0.801364  \n","122            0.508992  \n","123            0.697784  \n","\n","[124 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-6e31c7cd-2167-4a5e-afcf-48cc2b478201\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Change</th>\n","      <th>news_prob_scaled</th>\n","      <th>jongto_prob_scaled</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>87700</td>\n","      <td>88000</td>\n","      <td>86100</td>\n","      <td>86700</td>\n","      <td>410616</td>\n","      <td>-0.014773</td>\n","      <td>0.349326</td>\n","      <td>0.623016</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>86900</td>\n","      <td>89900</td>\n","      <td>86100</td>\n","      <td>89100</td>\n","      <td>683339</td>\n","      <td>0.027682</td>\n","      <td>0.382584</td>\n","      <td>0.647312</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>89900</td>\n","      <td>95900</td>\n","      <td>88100</td>\n","      <td>91000</td>\n","      <td>2363145</td>\n","      <td>0.021324</td>\n","      <td>0.491089</td>\n","      <td>0.625513</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>90500</td>\n","      <td>93900</td>\n","      <td>89600</td>\n","      <td>92200</td>\n","      <td>646786</td>\n","      <td>0.013187</td>\n","      <td>0.383724</td>\n","      <td>0.641886</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>93000</td>\n","      <td>99700</td>\n","      <td>85700</td>\n","      <td>90100</td>\n","      <td>3863446</td>\n","      <td>-0.022777</td>\n","      <td>0.404888</td>\n","      <td>0.623312</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>119</th>\n","      <td>116700</td>\n","      <td>129900</td>\n","      <td>116600</td>\n","      <td>124900</td>\n","      <td>723958</td>\n","      <td>0.071184</td>\n","      <td>0.259010</td>\n","      <td>0.641866</td>\n","    </tr>\n","    <tr>\n","      <th>120</th>\n","      <td>125500</td>\n","      <td>125600</td>\n","      <td>116900</td>\n","      <td>116900</td>\n","      <td>452799</td>\n","      <td>-0.064051</td>\n","      <td>0.395371</td>\n","      <td>0.563662</td>\n","    </tr>\n","    <tr>\n","      <th>121</th>\n","      <td>117000</td>\n","      <td>124300</td>\n","      <td>117000</td>\n","      <td>123400</td>\n","      <td>370524</td>\n","      <td>0.055603</td>\n","      <td>0.349430</td>\n","      <td>0.801364</td>\n","    </tr>\n","    <tr>\n","      <th>122</th>\n","      <td>123600</td>\n","      <td>128500</td>\n","      <td>122100</td>\n","      <td>128000</td>\n","      <td>258017</td>\n","      <td>0.037277</td>\n","      <td>0.425056</td>\n","      <td>0.508992</td>\n","    </tr>\n","    <tr>\n","      <th>123</th>\n","      <td>128000</td>\n","      <td>133500</td>\n","      <td>124600</td>\n","      <td>130600</td>\n","      <td>287530</td>\n","      <td>0.020312</td>\n","      <td>0.327262</td>\n","      <td>0.697784</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>124 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6e31c7cd-2167-4a5e-afcf-48cc2b478201')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6e31c7cd-2167-4a5e-afcf-48cc2b478201 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6e31c7cd-2167-4a5e-afcf-48cc2b478201');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-46efa5f7-0bee-40e3-9d85-4d20dd58db31\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-46efa5f7-0bee-40e3-9d85-4d20dd58db31')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-46efa5f7-0bee-40e3-9d85-4d20dd58db31 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bxafKrCcB8Ug","executionInfo":{"status":"ok","timestamp":1701948171708,"user_tz":-540,"elapsed":8,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"76e09459-57ef-4cfa-a62c-4db6d57d5755"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Change',\n","       'news_prob_scaled', 'jongto_prob_scaled'],\n","      dtype='object')"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df = df.drop([\"Date\"],axis = 1)\n","y = df[\"Close\"]\n","x = df.drop(\"Close\",axis=1)"],"metadata":{"id":"RvDRHVV0CyRn","executionInfo":{"status":"ok","timestamp":1701948174120,"user_tz":-540,"elapsed":2,"user":{"displayName":"김젼","userId":"08959404982920360269"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0, shuffle=False)"],"metadata":{"id":"_iChfJfaC1Xh","executionInfo":{"status":"ok","timestamp":1701948174120,"user_tz":-540,"elapsed":2,"user":{"displayName":"김젼","userId":"08959404982920360269"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["train = pd.concat([x_train,y_train], axis=1)\n","test = pd.concat([x_test,y_test], axis=1)"],"metadata":{"id":"EsCblyFSFYgA","executionInfo":{"status":"ok","timestamp":1701948175370,"user_tz":-540,"elapsed":4,"user":{"displayName":"김젼","userId":"08959404982920360269"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["train = pd.concat([x_train,y_train], axis=1)\n","test = pd.concat([x_test,y_test], axis=1)"],"metadata":{"id":"6ceCcCxYFaD2","executionInfo":{"status":"ok","timestamp":1701948175370,"user_tz":-540,"elapsed":3,"user":{"displayName":"김젼","userId":"08959404982920360269"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["sc = MinMaxScaler()\n","scale_cols = ['Open', 'High', 'Low', 'Close', 'Volume']\n","\n","\n","train[scale_cols] = sc.fit_transform(train[scale_cols])\n","test[scale_cols] = sc.transform(test[scale_cols])"],"metadata":{"id":"cn2E37hJFbls","executionInfo":{"status":"ok","timestamp":1701948175370,"user_tz":-540,"elapsed":2,"user":{"displayName":"김젼","userId":"08959404982920360269"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# many2many -> outpu_window size = 1로 함수 수정\n","def windowDataset(df, window_size, batch_size, shuffle) :\n","    x = df.drop(\"Close\",axis=1)\n","    y = df[\"Close\"]\n","    ds_x = tf.data.Dataset.from_tensor_slices(x)\n","    ds_x = ds_x.window(window_size, stride = 1, shift = 1, drop_remainder = True)\n","    ds_x = ds_x.flat_map(lambda x: x.batch(window_size))\n","\n","    ds_y = tf.data.Dataset.from_tensor_slices([y[i:i+1].values for i in range(window_size, len(y)-1)])\n","\n","    data = tf.data.Dataset.zip((ds_x,ds_y))\n","\n","    #if shuffle :\n","        #data = data.shuffle(10)\n","\n","    return data.batch(batch_size).prefetch(1)"],"metadata":{"id":"11eNt078FdBJ","executionInfo":{"status":"ok","timestamp":1701948175775,"user_tz":-540,"elapsed":2,"user":{"displayName":"김젼","userId":"08959404982920360269"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["WINDOW_SIZE=3\n","BATCH_SIZE=1\n","ratio = int(len(train) * 0.8)\n","\n","train_data = windowDataset(train[:ratio], WINDOW_SIZE, BATCH_SIZE, shuffle= True)\n","val_data = windowDataset(train[ratio:], WINDOW_SIZE, BATCH_SIZE, shuffle = False)\n","test_data = windowDataset(test, WINDOW_SIZE, BATCH_SIZE, shuffle = False)"],"metadata":{"id":"fbQ7e1NpFgGB","executionInfo":{"status":"ok","timestamp":1701948176368,"user_tz":-540,"elapsed":594,"user":{"displayName":"김젼","userId":"08959404982920360269"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["for data in train_data.take(1):\n","    print(f'학습 데이터셋(X) 구성(batch_size, window_size, feature갯수): {data[0].shape}')\n","    print(f'학습 데이터셋(Y) 구성(batch_size, window_size, feature갯수): {data[1].shape}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zde8hhqDFk21","executionInfo":{"status":"ok","timestamp":1701948179172,"user_tz":-540,"elapsed":944,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"c7a543e0-c907-4f4e-b047-a118f7115f33"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["학습 데이터셋(X) 구성(batch_size, window_size, feature갯수): (1, 3, 7)\n","학습 데이터셋(Y) 구성(batch_size, window_size, feature갯수): (1, 1)\n"]}]},{"cell_type":"code","source":["train_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kcNlSFvsHxyM","executionInfo":{"status":"ok","timestamp":1701948179172,"user_tz":-540,"elapsed":3,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"4dae7897-1cb4-4b8d-a346-dc9c62d55211"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<_PrefetchDataset element_spec=(TensorSpec(shape=(None, None, 7), dtype=tf.float64, name=None), TensorSpec(shape=(None, 1), dtype=tf.float64, name=None))>"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["len(test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hlHcrlQ_l02M","executionInfo":{"status":"ok","timestamp":1701948179173,"user_tz":-540,"elapsed":2,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"6833f16a-90e4-44f8-d95f-b582178d01b6"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["25"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["### LSTM"],"metadata":{"id":"DYbzYTw2GBEY"}},{"cell_type":"code","source":["model = Sequential([\n","    # 1차원 feature map 생성\n","    Conv1D(filters=32, kernel_size=5,\n","           padding=\"causal\",\n","           activation=\"relu\",\n","           input_shape=[None, 7]),\n","    # LSTM\n","    LSTM(16, activation='tanh'),\n","    Dense(16, activation=\"relu\"),\n","    Dense(1),\n","])"],"metadata":{"id":"q5hE4yWAFqbx","executionInfo":{"status":"ok","timestamp":1701948181656,"user_tz":-540,"elapsed":2099,"user":{"displayName":"김젼","userId":"08959404982920360269"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["loss = Huber()\n","optimizer = Adam(0.0005)\n","model.compile(loss=Huber(), optimizer=optimizer, metrics=['mse'])"],"metadata":{"id":"D7xKF41vGDTt","executionInfo":{"status":"ok","timestamp":1701948181656,"user_tz":-540,"elapsed":2,"user":{"displayName":"김젼","userId":"08959404982920360269"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["earlystopping = EarlyStopping(monitor='val_loss', patience=10)\n","filename = os.path.join('tmp', 'ckeckpointer.ckpt')\n","checkpoint = ModelCheckpoint(filename,\n","                             save_weights_only=True,\n","                             save_best_only=True,\n","                             monitor='val_loss',\n","                             verbose=1)"],"metadata":{"id":"VWijt6UWGFVW","executionInfo":{"status":"ok","timestamp":1701948184829,"user_tz":-540,"elapsed":4,"user":{"displayName":"김젼","userId":"08959404982920360269"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["history = model.fit(train_data,\n","                    validation_data=(val_data),\n","                    epochs=100,\n","                    callbacks=[checkpoint, earlystopping])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YVM5T_fJGLuM","executionInfo":{"status":"ok","timestamp":1701948259846,"user_tz":-540,"elapsed":74549,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"81293f79-78e9-4f73-f7f0-afbd8500a29e"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","     71/Unknown - 7s 11ms/step - loss: 0.0481 - mse: 0.0962\n","Epoch 1: val_loss improved from inf to 0.00817, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 9s 47ms/step - loss: 0.0457 - mse: 0.0913 - val_loss: 0.0082 - val_mse: 0.0163\n","Epoch 2/100\n","72/75 [===========================>..] - ETA: 0s - loss: 0.0152 - mse: 0.0303\n","Epoch 2: val_loss improved from 0.00817 to 0.00433, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 16ms/step - loss: 0.0146 - mse: 0.0291 - val_loss: 0.0043 - val_mse: 0.0087\n","Epoch 3/100\n","68/75 [==========================>...] - ETA: 0s - loss: 0.0128 - mse: 0.0255\n","Epoch 3: val_loss improved from 0.00433 to 0.00425, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 17ms/step - loss: 0.0117 - mse: 0.0234 - val_loss: 0.0043 - val_mse: 0.0085\n","Epoch 4/100\n","73/75 [============================>.] - ETA: 0s - loss: 0.0107 - mse: 0.0214\n","Epoch 4: val_loss improved from 0.00425 to 0.00404, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 20ms/step - loss: 0.0104 - mse: 0.0209 - val_loss: 0.0040 - val_mse: 0.0081\n","Epoch 5/100\n","70/75 [===========================>..] - ETA: 0s - loss: 0.0101 - mse: 0.0203\n","Epoch 5: val_loss improved from 0.00404 to 0.00380, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0095 - mse: 0.0190 - val_loss: 0.0038 - val_mse: 0.0076\n","Epoch 6/100\n","74/75 [============================>.] - ETA: 0s - loss: 0.0089 - mse: 0.0177\n","Epoch 6: val_loss improved from 0.00380 to 0.00369, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0087 - mse: 0.0175 - val_loss: 0.0037 - val_mse: 0.0074\n","Epoch 7/100\n","64/75 [========================>.....] - ETA: 0s - loss: 0.0095 - mse: 0.0190\n","Epoch 7: val_loss improved from 0.00369 to 0.00353, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0083 - mse: 0.0166 - val_loss: 0.0035 - val_mse: 0.0071\n","Epoch 8/100\n","63/75 [========================>.....] - ETA: 0s - loss: 0.0092 - mse: 0.0185\n","Epoch 8: val_loss improved from 0.00353 to 0.00342, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0080 - mse: 0.0159 - val_loss: 0.0034 - val_mse: 0.0068\n","Epoch 9/100\n","74/75 [============================>.] - ETA: 0s - loss: 0.0078 - mse: 0.0156\n","Epoch 9: val_loss improved from 0.00342 to 0.00331, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0077 - mse: 0.0154 - val_loss: 0.0033 - val_mse: 0.0066\n","Epoch 10/100\n","64/75 [========================>.....] - ETA: 0s - loss: 0.0086 - mse: 0.0171\n","Epoch 10: val_loss improved from 0.00331 to 0.00321, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0075 - mse: 0.0149 - val_loss: 0.0032 - val_mse: 0.0064\n","Epoch 11/100\n","73/75 [============================>.] - ETA: 0s - loss: 0.0075 - mse: 0.0149\n","Epoch 11: val_loss improved from 0.00321 to 0.00313, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0073 - mse: 0.0145 - val_loss: 0.0031 - val_mse: 0.0063\n","Epoch 12/100\n","68/75 [==========================>...] - ETA: 0s - loss: 0.0077 - mse: 0.0153\n","Epoch 12: val_loss improved from 0.00313 to 0.00305, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0071 - mse: 0.0141 - val_loss: 0.0030 - val_mse: 0.0061\n","Epoch 13/100\n","65/75 [=========================>....] - ETA: 0s - loss: 0.0078 - mse: 0.0155\n","Epoch 13: val_loss improved from 0.00305 to 0.00298, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0069 - mse: 0.0138 - val_loss: 0.0030 - val_mse: 0.0060\n","Epoch 14/100\n","66/75 [=========================>....] - ETA: 0s - loss: 0.0075 - mse: 0.0150\n","Epoch 14: val_loss improved from 0.00298 to 0.00290, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0067 - mse: 0.0135 - val_loss: 0.0029 - val_mse: 0.0058\n","Epoch 15/100\n","71/75 [===========================>..] - ETA: 0s - loss: 0.0069 - mse: 0.0138\n","Epoch 15: val_loss improved from 0.00290 to 0.00283, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0066 - mse: 0.0131 - val_loss: 0.0028 - val_mse: 0.0057\n","Epoch 16/100\n","75/75 [==============================] - ETA: 0s - loss: 0.0064 - mse: 0.0129\n","Epoch 16: val_loss improved from 0.00283 to 0.00277, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0064 - mse: 0.0129 - val_loss: 0.0028 - val_mse: 0.0055\n","Epoch 17/100\n","71/75 [===========================>..] - ETA: 0s - loss: 0.0066 - mse: 0.0132\n","Epoch 17: val_loss improved from 0.00277 to 0.00270, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0063 - mse: 0.0126 - val_loss: 0.0027 - val_mse: 0.0054\n","Epoch 18/100\n","71/75 [===========================>..] - ETA: 0s - loss: 0.0065 - mse: 0.0129\n","Epoch 18: val_loss improved from 0.00270 to 0.00265, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0062 - mse: 0.0123 - val_loss: 0.0026 - val_mse: 0.0053\n","Epoch 19/100\n","72/75 [===========================>..] - ETA: 0s - loss: 0.0062 - mse: 0.0124\n","Epoch 19: val_loss improved from 0.00265 to 0.00259, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0060 - mse: 0.0120 - val_loss: 0.0026 - val_mse: 0.0052\n","Epoch 20/100\n","75/75 [==============================] - ETA: 0s - loss: 0.0058 - mse: 0.0117\n","Epoch 20: val_loss improved from 0.00259 to 0.00254, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0058 - mse: 0.0117 - val_loss: 0.0025 - val_mse: 0.0051\n","Epoch 21/100\n","73/75 [============================>.] - ETA: 0s - loss: 0.0059 - mse: 0.0118\n","Epoch 21: val_loss improved from 0.00254 to 0.00250, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0058 - mse: 0.0115 - val_loss: 0.0025 - val_mse: 0.0050\n","Epoch 22/100\n","69/75 [==========================>...] - ETA: 0s - loss: 0.0060 - mse: 0.0119\n","Epoch 22: val_loss improved from 0.00250 to 0.00245, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0056 - mse: 0.0112 - val_loss: 0.0024 - val_mse: 0.0049\n","Epoch 23/100\n","74/75 [============================>.] - ETA: 0s - loss: 0.0056 - mse: 0.0112\n","Epoch 23: val_loss improved from 0.00245 to 0.00241, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 7ms/step - loss: 0.0055 - mse: 0.0110 - val_loss: 0.0024 - val_mse: 0.0048\n","Epoch 24/100\n","69/75 [==========================>...] - ETA: 0s - loss: 0.0057 - mse: 0.0114\n","Epoch 24: val_loss improved from 0.00241 to 0.00236, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0054 - mse: 0.0107 - val_loss: 0.0024 - val_mse: 0.0047\n","Epoch 25/100\n","72/75 [===========================>..] - ETA: 0s - loss: 0.0055 - mse: 0.0109\n","Epoch 25: val_loss improved from 0.00236 to 0.00232, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0053 - mse: 0.0105 - val_loss: 0.0023 - val_mse: 0.0046\n","Epoch 26/100\n","73/75 [============================>.] - ETA: 0s - loss: 0.0053 - mse: 0.0105\n","Epoch 26: val_loss improved from 0.00232 to 0.00229, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0051 - mse: 0.0103 - val_loss: 0.0023 - val_mse: 0.0046\n","Epoch 27/100\n","75/75 [==============================] - ETA: 0s - loss: 0.0051 - mse: 0.0101\n","Epoch 27: val_loss improved from 0.00229 to 0.00226, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0051 - mse: 0.0101 - val_loss: 0.0023 - val_mse: 0.0045\n","Epoch 28/100\n","75/75 [==============================] - ETA: 0s - loss: 0.0049 - mse: 0.0098\n","Epoch 28: val_loss improved from 0.00226 to 0.00222, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0049 - mse: 0.0098 - val_loss: 0.0022 - val_mse: 0.0044\n","Epoch 29/100\n","72/75 [===========================>..] - ETA: 0s - loss: 0.0050 - mse: 0.0100\n","Epoch 29: val_loss improved from 0.00222 to 0.00220, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0048 - mse: 0.0096 - val_loss: 0.0022 - val_mse: 0.0044\n","Epoch 30/100\n","68/75 [==========================>...] - ETA: 0s - loss: 0.0050 - mse: 0.0100\n","Epoch 30: val_loss improved from 0.00220 to 0.00217, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0047 - mse: 0.0094 - val_loss: 0.0022 - val_mse: 0.0043\n","Epoch 31/100\n","68/75 [==========================>...] - ETA: 0s - loss: 0.0049 - mse: 0.0099\n","Epoch 31: val_loss improved from 0.00217 to 0.00215, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0046 - mse: 0.0093 - val_loss: 0.0022 - val_mse: 0.0043\n","Epoch 32/100\n","66/75 [=========================>....] - ETA: 0s - loss: 0.0049 - mse: 0.0098\n","Epoch 32: val_loss improved from 0.00215 to 0.00214, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0045 - mse: 0.0090 - val_loss: 0.0021 - val_mse: 0.0043\n","Epoch 33/100\n","68/75 [==========================>...] - ETA: 0s - loss: 0.0047 - mse: 0.0094\n","Epoch 33: val_loss improved from 0.00214 to 0.00212, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0044 - mse: 0.0088 - val_loss: 0.0021 - val_mse: 0.0042\n","Epoch 34/100\n","65/75 [=========================>....] - ETA: 0s - loss: 0.0046 - mse: 0.0093\n","Epoch 34: val_loss improved from 0.00212 to 0.00211, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0042 - mse: 0.0085 - val_loss: 0.0021 - val_mse: 0.0042\n","Epoch 35/100\n","74/75 [============================>.] - ETA: 0s - loss: 0.0042 - mse: 0.0084\n","Epoch 35: val_loss improved from 0.00211 to 0.00209, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0041 - mse: 0.0083 - val_loss: 0.0021 - val_mse: 0.0042\n","Epoch 36/100\n","66/75 [=========================>....] - ETA: 0s - loss: 0.0044 - mse: 0.0089\n","Epoch 36: val_loss improved from 0.00209 to 0.00208, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0041 - mse: 0.0082 - val_loss: 0.0021 - val_mse: 0.0042\n","Epoch 37/100\n","75/75 [==============================] - ETA: 0s - loss: 0.0039 - mse: 0.0079\n","Epoch 37: val_loss improved from 0.00208 to 0.00206, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0039 - mse: 0.0079 - val_loss: 0.0021 - val_mse: 0.0041\n","Epoch 38/100\n","75/75 [==============================] - ETA: 0s - loss: 0.0039 - mse: 0.0078\n","Epoch 38: val_loss improved from 0.00206 to 0.00206, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0039 - mse: 0.0078 - val_loss: 0.0021 - val_mse: 0.0041\n","Epoch 39/100\n","74/75 [============================>.] - ETA: 0s - loss: 0.0038 - mse: 0.0077\n","Epoch 39: val_loss improved from 0.00206 to 0.00204, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0038 - mse: 0.0076 - val_loss: 0.0020 - val_mse: 0.0041\n","Epoch 40/100\n","73/75 [============================>.] - ETA: 0s - loss: 0.0038 - mse: 0.0077\n","Epoch 40: val_loss improved from 0.00204 to 0.00203, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0037 - mse: 0.0075 - val_loss: 0.0020 - val_mse: 0.0041\n","Epoch 41/100\n","72/75 [===========================>..] - ETA: 0s - loss: 0.0038 - mse: 0.0076\n","Epoch 41: val_loss improved from 0.00203 to 0.00203, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0037 - mse: 0.0073 - val_loss: 0.0020 - val_mse: 0.0041\n","Epoch 42/100\n","71/75 [===========================>..] - ETA: 0s - loss: 0.0037 - mse: 0.0074\n","Epoch 42: val_loss did not improve from 0.00203\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0036 - mse: 0.0072 - val_loss: 0.0020 - val_mse: 0.0041\n","Epoch 43/100\n","70/75 [===========================>..] - ETA: 0s - loss: 0.0037 - mse: 0.0074\n","Epoch 43: val_loss did not improve from 0.00203\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0035 - mse: 0.0071 - val_loss: 0.0020 - val_mse: 0.0041\n","Epoch 44/100\n","67/75 [=========================>....] - ETA: 0s - loss: 0.0037 - mse: 0.0073\n","Epoch 44: val_loss did not improve from 0.00203\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0035 - mse: 0.0069 - val_loss: 0.0020 - val_mse: 0.0041\n","Epoch 45/100\n","75/75 [==============================] - ETA: 0s - loss: 0.0034 - mse: 0.0068\n","Epoch 45: val_loss did not improve from 0.00203\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0034 - mse: 0.0068 - val_loss: 0.0020 - val_mse: 0.0041\n","Epoch 46/100\n","75/75 [==============================] - ETA: 0s - loss: 0.0033 - mse: 0.0066\n","Epoch 46: val_loss improved from 0.00203 to 0.00202, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0033 - mse: 0.0066 - val_loss: 0.0020 - val_mse: 0.0040\n","Epoch 47/100\n","70/75 [===========================>..] - ETA: 0s - loss: 0.0035 - mse: 0.0070\n","Epoch 47: val_loss did not improve from 0.00202\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0033 - mse: 0.0067 - val_loss: 0.0021 - val_mse: 0.0041\n","Epoch 48/100\n","72/75 [===========================>..] - ETA: 0s - loss: 0.0033 - mse: 0.0066\n","Epoch 48: val_loss did not improve from 0.00202\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0032 - mse: 0.0064 - val_loss: 0.0020 - val_mse: 0.0041\n","Epoch 49/100\n","72/75 [===========================>..] - ETA: 0s - loss: 0.0033 - mse: 0.0065\n","Epoch 49: val_loss improved from 0.00202 to 0.00201, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 9ms/step - loss: 0.0031 - mse: 0.0063 - val_loss: 0.0020 - val_mse: 0.0040\n","Epoch 50/100\n","75/75 [==============================] - ETA: 0s - loss: 0.0032 - mse: 0.0063\n","Epoch 50: val_loss did not improve from 0.00201\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0032 - mse: 0.0063 - val_loss: 0.0020 - val_mse: 0.0041\n","Epoch 51/100\n","71/75 [===========================>..] - ETA: 0s - loss: 0.0032 - mse: 0.0063\n","Epoch 51: val_loss did not improve from 0.00201\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0031 - mse: 0.0061 - val_loss: 0.0020 - val_mse: 0.0041\n","Epoch 52/100\n","68/75 [==========================>...] - ETA: 0s - loss: 0.0032 - mse: 0.0063\n","Epoch 52: val_loss did not improve from 0.00201\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0030 - mse: 0.0061 - val_loss: 0.0020 - val_mse: 0.0041\n","Epoch 53/100\n","75/75 [==============================] - ETA: 0s - loss: 0.0030 - mse: 0.0060\n","Epoch 53: val_loss did not improve from 0.00201\n","75/75 [==============================] - 1s 7ms/step - loss: 0.0030 - mse: 0.0060 - val_loss: 0.0020 - val_mse: 0.0041\n","Epoch 54/100\n","73/75 [============================>.] - ETA: 0s - loss: 0.0030 - mse: 0.0061\n","Epoch 54: val_loss did not improve from 0.00201\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0030 - mse: 0.0059 - val_loss: 0.0020 - val_mse: 0.0040\n","Epoch 55/100\n","67/75 [=========================>....] - ETA: 0s - loss: 0.0030 - mse: 0.0061\n","Epoch 55: val_loss improved from 0.00201 to 0.00199, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0029 - mse: 0.0058 - val_loss: 0.0020 - val_mse: 0.0040\n","Epoch 56/100\n","75/75 [==============================] - ETA: 0s - loss: 0.0029 - mse: 0.0058\n","Epoch 56: val_loss did not improve from 0.00199\n","75/75 [==============================] - 1s 7ms/step - loss: 0.0029 - mse: 0.0058 - val_loss: 0.0020 - val_mse: 0.0040\n","Epoch 57/100\n","74/75 [============================>.] - ETA: 0s - loss: 0.0029 - mse: 0.0058\n","Epoch 57: val_loss improved from 0.00199 to 0.00198, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0029 - mse: 0.0057 - val_loss: 0.0020 - val_mse: 0.0040\n","Epoch 58/100\n","68/75 [==========================>...] - ETA: 0s - loss: 0.0029 - mse: 0.0059\n","Epoch 58: val_loss improved from 0.00198 to 0.00198, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0028 - mse: 0.0056 - val_loss: 0.0020 - val_mse: 0.0040\n","Epoch 59/100\n","73/75 [============================>.] - ETA: 0s - loss: 0.0029 - mse: 0.0058\n","Epoch 59: val_loss did not improve from 0.00198\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0028 - mse: 0.0056 - val_loss: 0.0020 - val_mse: 0.0040\n","Epoch 60/100\n","68/75 [==========================>...] - ETA: 0s - loss: 0.0029 - mse: 0.0058\n","Epoch 60: val_loss did not improve from 0.00198\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0028 - mse: 0.0055 - val_loss: 0.0020 - val_mse: 0.0040\n","Epoch 61/100\n","63/75 [========================>.....] - ETA: 0s - loss: 0.0030 - mse: 0.0060\n","Epoch 61: val_loss improved from 0.00198 to 0.00196, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0027 - mse: 0.0054 - val_loss: 0.0020 - val_mse: 0.0039\n","Epoch 62/100\n","69/75 [==========================>...] - ETA: 0s - loss: 0.0028 - mse: 0.0057\n","Epoch 62: val_loss did not improve from 0.00196\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0027 - mse: 0.0055 - val_loss: 0.0020 - val_mse: 0.0039\n","Epoch 63/100\n","69/75 [==========================>...] - ETA: 0s - loss: 0.0028 - mse: 0.0056\n","Epoch 63: val_loss did not improve from 0.00196\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0027 - mse: 0.0054 - val_loss: 0.0020 - val_mse: 0.0039\n","Epoch 64/100\n","65/75 [=========================>....] - ETA: 0s - loss: 0.0029 - mse: 0.0057\n","Epoch 64: val_loss did not improve from 0.00196\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0027 - mse: 0.0053 - val_loss: 0.0020 - val_mse: 0.0039\n","Epoch 65/100\n","74/75 [============================>.] - ETA: 0s - loss: 0.0027 - mse: 0.0054\n","Epoch 65: val_loss did not improve from 0.00196\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0027 - mse: 0.0053 - val_loss: 0.0020 - val_mse: 0.0039\n","Epoch 66/100\n","71/75 [===========================>..] - ETA: 0s - loss: 0.0027 - mse: 0.0054\n","Epoch 66: val_loss improved from 0.00196 to 0.00195, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0026 - mse: 0.0052 - val_loss: 0.0020 - val_mse: 0.0039\n","Epoch 67/100\n","70/75 [===========================>..] - ETA: 0s - loss: 0.0027 - mse: 0.0054\n","Epoch 67: val_loss improved from 0.00195 to 0.00194, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0026 - mse: 0.0052 - val_loss: 0.0019 - val_mse: 0.0039\n","Epoch 68/100\n","75/75 [==============================] - ETA: 0s - loss: 0.0026 - mse: 0.0052\n","Epoch 68: val_loss did not improve from 0.00194\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0026 - mse: 0.0052 - val_loss: 0.0020 - val_mse: 0.0039\n","Epoch 69/100\n","64/75 [========================>.....] - ETA: 0s - loss: 0.0028 - mse: 0.0055\n","Epoch 69: val_loss improved from 0.00194 to 0.00193, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0025 - mse: 0.0051 - val_loss: 0.0019 - val_mse: 0.0039\n","Epoch 70/100\n","62/75 [=======================>......] - ETA: 0s - loss: 0.0028 - mse: 0.0057\n","Epoch 70: val_loss did not improve from 0.00193\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0025 - mse: 0.0051 - val_loss: 0.0019 - val_mse: 0.0039\n","Epoch 71/100\n","75/75 [==============================] - ETA: 0s - loss: 0.0025 - mse: 0.0050\n","Epoch 71: val_loss did not improve from 0.00193\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0025 - mse: 0.0050 - val_loss: 0.0019 - val_mse: 0.0039\n","Epoch 72/100\n","69/75 [==========================>...] - ETA: 0s - loss: 0.0026 - mse: 0.0052\n","Epoch 72: val_loss improved from 0.00193 to 0.00193, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0025 - mse: 0.0050 - val_loss: 0.0019 - val_mse: 0.0039\n","Epoch 73/100\n","65/75 [=========================>....] - ETA: 0s - loss: 0.0027 - mse: 0.0053\n","Epoch 73: val_loss improved from 0.00193 to 0.00192, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0025 - mse: 0.0050 - val_loss: 0.0019 - val_mse: 0.0038\n","Epoch 74/100\n","71/75 [===========================>..] - ETA: 0s - loss: 0.0025 - mse: 0.0051\n","Epoch 74: val_loss improved from 0.00192 to 0.00190, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0025 - mse: 0.0049 - val_loss: 0.0019 - val_mse: 0.0038\n","Epoch 75/100\n","71/75 [===========================>..] - ETA: 0s - loss: 0.0025 - mse: 0.0051\n","Epoch 75: val_loss improved from 0.00190 to 0.00189, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 7ms/step - loss: 0.0024 - mse: 0.0049 - val_loss: 0.0019 - val_mse: 0.0038\n","Epoch 76/100\n","71/75 [===========================>..] - ETA: 0s - loss: 0.0025 - mse: 0.0050\n","Epoch 76: val_loss improved from 0.00189 to 0.00189, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0024 - mse: 0.0049 - val_loss: 0.0019 - val_mse: 0.0038\n","Epoch 77/100\n","69/75 [==========================>...] - ETA: 0s - loss: 0.0025 - mse: 0.0050\n","Epoch 77: val_loss improved from 0.00189 to 0.00188, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0024 - mse: 0.0048 - val_loss: 0.0019 - val_mse: 0.0038\n","Epoch 78/100\n","69/75 [==========================>...] - ETA: 0s - loss: 0.0025 - mse: 0.0050\n","Epoch 78: val_loss did not improve from 0.00188\n","75/75 [==============================] - 1s 7ms/step - loss: 0.0024 - mse: 0.0048 - val_loss: 0.0019 - val_mse: 0.0038\n","Epoch 79/100\n","74/75 [============================>.] - ETA: 0s - loss: 0.0024 - mse: 0.0048\n","Epoch 79: val_loss improved from 0.00188 to 0.00188, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0024 - mse: 0.0047 - val_loss: 0.0019 - val_mse: 0.0038\n","Epoch 80/100\n","73/75 [============================>.] - ETA: 0s - loss: 0.0024 - mse: 0.0049\n","Epoch 80: val_loss improved from 0.00188 to 0.00187, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0024 - mse: 0.0048 - val_loss: 0.0019 - val_mse: 0.0037\n","Epoch 81/100\n","73/75 [============================>.] - ETA: 0s - loss: 0.0024 - mse: 0.0048\n","Epoch 81: val_loss improved from 0.00187 to 0.00186, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0023 - mse: 0.0047 - val_loss: 0.0019 - val_mse: 0.0037\n","Epoch 82/100\n","69/75 [==========================>...] - ETA: 0s - loss: 0.0024 - mse: 0.0049\n","Epoch 82: val_loss improved from 0.00186 to 0.00185, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0023 - mse: 0.0047 - val_loss: 0.0019 - val_mse: 0.0037\n","Epoch 83/100\n","70/75 [===========================>..] - ETA: 0s - loss: 0.0024 - mse: 0.0048\n","Epoch 83: val_loss improved from 0.00185 to 0.00182, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0023 - mse: 0.0046 - val_loss: 0.0018 - val_mse: 0.0036\n","Epoch 84/100\n","74/75 [============================>.] - ETA: 0s - loss: 0.0024 - mse: 0.0047\n","Epoch 84: val_loss did not improve from 0.00182\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0023 - mse: 0.0046 - val_loss: 0.0018 - val_mse: 0.0037\n","Epoch 85/100\n","64/75 [========================>.....] - ETA: 0s - loss: 0.0025 - mse: 0.0050\n","Epoch 85: val_loss did not improve from 0.00182\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0023 - mse: 0.0046 - val_loss: 0.0019 - val_mse: 0.0037\n","Epoch 86/100\n","74/75 [============================>.] - ETA: 0s - loss: 0.0023 - mse: 0.0046\n","Epoch 86: val_loss improved from 0.00182 to 0.00182, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0023 - mse: 0.0046 - val_loss: 0.0018 - val_mse: 0.0036\n","Epoch 87/100\n","67/75 [=========================>....] - ETA: 0s - loss: 0.0024 - mse: 0.0048\n","Epoch 87: val_loss did not improve from 0.00182\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0023 - mse: 0.0046 - val_loss: 0.0018 - val_mse: 0.0037\n","Epoch 88/100\n","68/75 [==========================>...] - ETA: 0s - loss: 0.0024 - mse: 0.0047\n","Epoch 88: val_loss did not improve from 0.00182\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0023 - mse: 0.0045 - val_loss: 0.0018 - val_mse: 0.0037\n","Epoch 89/100\n","64/75 [========================>.....] - ETA: 0s - loss: 0.0024 - mse: 0.0049\n","Epoch 89: val_loss improved from 0.00182 to 0.00178, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0022 - mse: 0.0045 - val_loss: 0.0018 - val_mse: 0.0036\n","Epoch 90/100\n","72/75 [===========================>..] - ETA: 0s - loss: 0.0023 - mse: 0.0047\n","Epoch 90: val_loss did not improve from 0.00178\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0023 - mse: 0.0045 - val_loss: 0.0018 - val_mse: 0.0036\n","Epoch 91/100\n","72/75 [===========================>..] - ETA: 0s - loss: 0.0023 - mse: 0.0046\n","Epoch 91: val_loss improved from 0.00178 to 0.00176, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0022 - mse: 0.0044 - val_loss: 0.0018 - val_mse: 0.0035\n","Epoch 92/100\n","72/75 [===========================>..] - ETA: 0s - loss: 0.0023 - mse: 0.0046\n","Epoch 92: val_loss improved from 0.00176 to 0.00175, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0022 - mse: 0.0044 - val_loss: 0.0018 - val_mse: 0.0035\n","Epoch 93/100\n","73/75 [============================>.] - ETA: 0s - loss: 0.0023 - mse: 0.0046\n","Epoch 93: val_loss did not improve from 0.00175\n","75/75 [==============================] - 0s 5ms/step - loss: 0.0022 - mse: 0.0045 - val_loss: 0.0018 - val_mse: 0.0035\n","Epoch 94/100\n","71/75 [===========================>..] - ETA: 0s - loss: 0.0022 - mse: 0.0045\n","Epoch 94: val_loss improved from 0.00175 to 0.00170, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0021 - mse: 0.0043 - val_loss: 0.0017 - val_mse: 0.0034\n","Epoch 95/100\n","68/75 [==========================>...] - ETA: 0s - loss: 0.0023 - mse: 0.0045\n","Epoch 95: val_loss improved from 0.00170 to 0.00170, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0022 - mse: 0.0043 - val_loss: 0.0017 - val_mse: 0.0034\n","Epoch 96/100\n","67/75 [=========================>....] - ETA: 0s - loss: 0.0023 - mse: 0.0045\n","Epoch 96: val_loss did not improve from 0.00170\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0021 - mse: 0.0043 - val_loss: 0.0017 - val_mse: 0.0034\n","Epoch 97/100\n","69/75 [==========================>...] - ETA: 0s - loss: 0.0022 - mse: 0.0044\n","Epoch 97: val_loss improved from 0.00170 to 0.00168, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 0s 6ms/step - loss: 0.0021 - mse: 0.0042 - val_loss: 0.0017 - val_mse: 0.0034\n","Epoch 98/100\n","74/75 [============================>.] - ETA: 0s - loss: 0.0021 - mse: 0.0043\n","Epoch 98: val_loss improved from 0.00168 to 0.00168, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 7ms/step - loss: 0.0021 - mse: 0.0042 - val_loss: 0.0017 - val_mse: 0.0034\n","Epoch 99/100\n","70/75 [===========================>..] - ETA: 0s - loss: 0.0022 - mse: 0.0043\n","Epoch 99: val_loss improved from 0.00168 to 0.00167, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 9ms/step - loss: 0.0021 - mse: 0.0041 - val_loss: 0.0017 - val_mse: 0.0033\n","Epoch 100/100\n","74/75 [============================>.] - ETA: 0s - loss: 0.0021 - mse: 0.0042\n","Epoch 100: val_loss improved from 0.00167 to 0.00166, saving model to tmp/ckeckpointer.ckpt\n","75/75 [==============================] - 1s 8ms/step - loss: 0.0021 - mse: 0.0041 - val_loss: 0.0017 - val_mse: 0.0033\n"]}]},{"cell_type":"code","source":["model.load_weights(filename)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YH_5jQa3GUN9","executionInfo":{"status":"ok","timestamp":1701948266916,"user_tz":-540,"elapsed":511,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"4107a10e-355f-4f6e-fafe-032f78764a23"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.checkpoint.checkpoint.CheckpointLoadStatus at 0x7ab1036e4ca0>"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["pred = model.predict(test_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pzCiSjuEIyR5","executionInfo":{"status":"ok","timestamp":1701948267727,"user_tz":-540,"elapsed":813,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"f4038bf5-f171-4e84-d511-a6c5b53eba09"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["21/21 [==============================] - 1s 2ms/step\n"]}]},{"cell_type":"code","source":["pred.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e2_H3rapIzUz","executionInfo":{"status":"ok","timestamp":1701948267727,"user_tz":-540,"elapsed":4,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"b849e22e-207d-4ab6-a1d2-248223253ba2"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(21, 1)"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xtrXWcv9I0ew","executionInfo":{"status":"ok","timestamp":1701948270039,"user_tz":-540,"elapsed":5,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"d7a409ab-4a49-41e5-eb48-fae24d0adf1a"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.28067553],\n","       [0.2759106 ],\n","       [0.27218583],\n","       [0.28414476],\n","       [0.28279275],\n","       [0.27081698],\n","       [0.26452497],\n","       [0.28000602],\n","       [0.38276887],\n","       [0.49641916],\n","       [0.48983082],\n","       [0.42052853],\n","       [0.4147187 ],\n","       [0.40965062],\n","       [0.41463336],\n","       [0.47093195],\n","       [0.436738  ],\n","       [0.398163  ],\n","       [0.5310035 ],\n","       [0.46592772],\n","       [0.51010674]], dtype=float32)"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["plt.figure(figsize=(8, 6))\n","plt.plot(np.asarray(test['Close'])[2:], label='actual')\n","plt.plot(pred, label='prediction')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":522},"id":"nhGohb64I1wi","executionInfo":{"status":"ok","timestamp":1701948273668,"user_tz":-540,"elapsed":908,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"1ebbc8bb-5f32-46f0-a62d-3c7b1db0ad21"},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["train_loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(1, len(train_loss) + 1)\n","\n","plt.plot(epochs, train_loss, 'r', label='Training loss')\n","plt.plot(epochs, val_loss, 'b', label='Validation loss')\n","plt.title('Training and Validation Loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"SyX9Us8II3uw","executionInfo":{"status":"ok","timestamp":1701948286284,"user_tz":-540,"elapsed":384,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"231492c5-cdb9-40fc-fd0d-18e571ab920e"},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["score = model.evaluate(test_data)\n","score"],"metadata":{"id":"eBlXa5XeI-hZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701948292206,"user_tz":-540,"elapsed":399,"user":{"displayName":"김젼","userId":"08959404982920360269"}},"outputId":"5d2cee51-4ffb-457b-b6dd-3617f68a4f97"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["21/21 [==============================] - 0s 5ms/step - loss: 0.0020 - mse: 0.0041\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.0020375570748001337, 0.004075114149600267]"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":[],"metadata":{"id":"LhEkurVHBfeA"},"execution_count":null,"outputs":[]}]}